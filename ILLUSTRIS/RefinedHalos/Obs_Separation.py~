import sqlite3
import os
import sys
import numpy
import random
from numpy import * 
from numpy import linalg
import scipy
from scipy.optimize import brentq
import pylab as pl
import matplotlib.pyplot as plt
import matplotlib.mlab as mlab
import numpy as np
np.seterr(divide = 'ignore', invalid = 'ignore')

# Connecting to the database
conn = sqlite3.connect('../ILLUSTRIS.db')
c = conn.cursor()

# Gravitational constant
G = 6.67e-11 * (1.e-3)**2. * (2.e30)/(3.086e19) 

# Hubble constant
h = 0.704

# Plot parameters
n_bins_def = 200
host_count_def = 50

# Number of bins
n_bins = raw_input("\nEnter no. of bins (Press Enter for default = {Def}): ".format(Def = n_bins_def))
if len(n_bins) == 0:
	n_bins = n_bins_def
else:
	n_bins = int(n_bins)

# Number of hosts
host_count = raw_input("\nEnter set size (Press Enter for default = {Def}): ".format(Def = host_count_def))
if len(host_count) == 0:
	host_count = host_count_def
else:
	host_count = int(host_count)

# Returns the distance between P1 and P2 (in kpc)
def Distance_3D(P1, P2):
	x1 = P1[0]
	x2 = P2[0]
	y1 = P1[1]
	y2 = P2[1]
	z1 = P1[2]
	z2 = P2[2]
	return (((x1-x2)**2 + (y1-y2)**2 + (z1-z2)**2)**0.5)/h

# Returns the 2D distance between P1 and P2 (in kpc)
def Distance_2D(P1, P2):
	y1 = P1[1]
	y2 = P2[1]
	z1 = P1[2]
	z2 = P2[2]
	return (((y1-y2)**2 + (z1-z2)**2)**0.5)/h

# List of distances
distances = []

# Acquiring the subhalos
print "Loading subhalos..."
c.execute("SELECT Subhalos.SubhaloID, SubhaloPos.X, SubhaloPos.Y, SubhaloPos.Z, SubhaloVel.X, Subhalos.StellarMass FROM Subhalos INNER JOIN SubhaloPos ON SubhaloPos.SubhaloID = Subhalos.SubhaloID INNER JOIN SubhaloVel ON SubhaloVel.SubhaloID = Subhalos.SubhaloID")
Subhalos = c.fetchall()

# Acquiring halos
print "Loading halos..."
c.execute("SELECT Groups.GroupID, GroupPos.X, GroupPos.Y, GroupPos.Z, Groups.StellarMass, Groups.Group_R_Crit200, GroupVel.X, Groups.Group_M_Crit200 FROM Groups INNER JOIN RefinedGroups ON RefinedGroups.GroupID = Groups.GroupID INNER JOIN GroupPos ON Groups.GroupID = GroupPos.GroupID INNER JOIN GroupVel ON Groups.GroupID = GroupVel.GroupID")
Halos = c.fetchall()

#Loading bar
barwidth = 50
fraction = host_count/(barwidth-1)
sys.stdout.write("Creating velocity function:\t[%s]"%(" "*barwidth))
sys.stdout.flush()
sys.stdout.write("\b"*(barwidth+1))

# Selecting random hosts
RandomHosts = []
for j in range(0,host_count):
	# Increasing the loading bar
	if j % fraction == 0:
		sys.stdout.write("#")
		sys.stdout.flush()

	# Selecting a random host (that already hasn't been selected)
	ind = np.random.choice(len(Halos))
	while Halos[ind] in RandomHosts:
		ind = np.random.choice(len(Halos))
	Halo = Halos[ind]
	RandomHosts.append(Halos[ind])

	GroupID = Halo[0]
	GroupPos = (Halo[1], Halo[2], Halo[3])
	GroupMass = Halo[4]
	GroupRvir = Halo[5]
	GroupVelX = Halo[6]
	GroupMvir = Halo[7]

	# Finding satellites
	for Sat in Subhalos:

		SatID = Sat[0]
		SatPos = (Sat[1], Sat[2], Sat[3])
		SatVelX = Sat[4]
		SatMass = Sat[5]
		Dist2D = Distance_2D(GroupPos, SatPos)
		Dist3D = Distance_3D(GroupPos, SatPos)

		# Calculating the virial velocity
		Vvir = ((G * GroupMvir/GroupRvir)*(3e8/1e10))**(0.5)

		if (Dist2D < GroupRvir/h) and (SatMass < GroupMass) and (numpy.absolute(SatVelX - GroupVelX) < Vvir) and not SatID == GroupID:
			distances.append(Dist3D)
	
print "\n"
# Create the plot
fig, ax = plt.subplots()
n, bins, patches = ax.hist(distances, n_bins, normed = 1, histtype = 'stepfilled', stacked = True)
ax.set_xlabel('Distance (kpc)')
ax.set_ylabel('Probability')
ax.set_title('Separation between refined halos and their observed satellites\nSample size = {size}; bin size = {bin}; '.format(size = host_count, bin = n_bins)+"$\mu =$ {mean}; $\sigma =$ {std}; max distance = {maxdist}".format(mean = '%.3f'% mean(distances), std = '%.3f'% std(distances), maxdist = max(distances)))
plt.grid(True)
fig.set_size_inches(10,10)	
plt.savefig("Obs_Separation.png")
plt.close()

